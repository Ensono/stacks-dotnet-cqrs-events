{
    "$schema": "http://json.schemastore.org/template",
    "author": "stacks@amido.com",
    "classifications": [
        "Stacks",
        "CQRS",
        "Events",
        "WebAPI"
    ],
    "name": "Amido Stacks CQRS Events Web API",
    "identity": "Amido.Stacks.Cqrs.Events.WebApi.CSharp",
    "groupIdentity": "Amido.Stacks.Cqrs.Events.WebApi",
    "shortName": "stacks-cqrs-events-webapi",
    "tags": {
        "language": "C#",
        "type": "project"
    },
    "sourceName": "xxAMIDOxx.xxSTACKSxx",
    "preferNameDirectory": true,
    "symbols": {
        "domain": {
            "type": "parameter",
            "isRequired": true,
            "replaces": "Menu",
            "fileRename": "Menu",
            "defaultValue": "DOMAIN",
            "forms": {
                "global": [
                    "identity",
                    "lowerCase"
                ]
            }
        },
        "eventPublisher": {
            "type": "parameter",
            "datatype": "choice",
            "defaultValue": "None",
            "choices": [
                {
                    "choice": "ServiceBus",
                    "description": "Targets the Azure Service Bus for publishing events."
                },
                {
                    "choice": "EventHub",
                    "description": "Targets the Azure Event Hub for publishing events."
                },
                {
                    "choice": "AwsSqs",
                    "description": "Targets the AWS SQS for publishing events."
                },
                {
					"choice": "None",
					"description": "Does not add event publishing"
				}
            ],
            "description": "Adds event publishing."
        },
        "database": {
            "type": "parameter",
            "datatype": "choice",
            "defaultValue": "InMemoryDb",
            "choices": [
                {
                    "choice": "CosmosDb",
                    "description": "Targets Azure Cosmos database for storing data."
                },
                {
                    "choice": "DynamoDb",
                    "description": "Targets AWS Dynamo database for storing data."
                },
                {
					"choice": "InMemoryDb",
					"description": "Targets an In Memory database for storing data."
				}
            ],
            "description": "Adds saving to database."
        },
        "CosmosDb": {
            "type": "computed",
            "value": "(database == \"CosmosDb\")"
        },
        "DynamoDb": {
            "type": "computed",
            "value": "(database == \"DynamoDb\")"
        },
        "InMemoryDb": {
			"type": "computed",
			"value": "(database == \"InMemoryDb\")"
		},
        "EventPublisherServiceBus": {
            "type": "computed",
            "value": "(eventPublisher == \"ServiceBus\")"
        },
        "EventPublisherEventHub": {
            "type": "computed",
            "value": "(eventPublisher == \"EventHub\")"
        },
        "EventPublisherAwsSqs": {
			"type": "computed",
			"value": "(eventPublisher == \"AwsSqs\")"
		},
        "EventPublisherNone": {
			"type": "computed",
			"value": "(eventPublisher == \"None\")"
		}
    },
    "sources": [
        {
            "source": "./",
            "include": [
                "**/*"
            ],
            "exclude": [
                "**/[Bb]in/**",
                "**/[Oo]bj/**",
                "**/.template.config/**",
                "**/*.filelist",
                "**/*.user",
                "**/*.lock.json",
                "**/.git/**",
                "**/.vs/**",
                "**/.vscode/**",
                "_rels/**",
                "package/**",
                "**/*.nuspec",
                "*Content_Types*.xml"
            ],
            "rename": {
                "_gitignore": ".gitignore",
                "_gitattributes": ".gitattributes"
            },
            "modifiers": [
                {
                    "condition": "(CosmosDb)",
                    "exclude": [
                        "xxAMIDOxx.xxSTACKSxx.Infrastructure/Repositories/DynamoDbMenuRepository.cs",
                        "xxAMIDOxx.xxSTACKSxx.Infrastructure.IntegrationTests/DynamoDbMenuRepositoryTests.cs"
                    ]
                },
                {
                    "condition": "(DynamoDb)",
                    "exclude": [
                        "xxAMIDOxx.xxSTACKSxx.Infrastructure/Repositories/CosmosDbMenuRepository.cs",
                        "xxAMIDOxx.xxSTACKSxx.Infrastructure.IntegrationTests/CosmosDbMenuRepositoryTests.cs"
                    ]
                },
                {
                    "condition": "(!CosmosDb && !DynamoDb)",
                    "exclude": [
                        "xxAMIDOxx.xxSTACKSxx.Infrastructure/Repositories/CosmosDbMenuRepository.cs",
                        "xxAMIDOxx.xxSTACKSxx.Infrastructure.IntegrationTests/CosmosDbMenuRepositoryTests.cs",
                        "xxAMIDOxx.xxSTACKSxx.Infrastructure/Repositories/DynamoDbMenuRepository.cs",
                        "xxAMIDOxx.xxSTACKSxx.Infrastructure.IntegrationTests/DynamoDbMenuRepositoryTests.cs"
                    ]
                },
                {
                    "condition": "EventPublisherServiceBus || EventPublisherEventHub",
                    "exclude": [
                        "xxAMIDOxx.xxSTACKSxx.Infrastructure/Fakes/DummyEventPublisher.cs"
                    ]
                }
            ]
        }
    ],
    "SpecialCustomOperations": {
        "**/*.yml": {
            "Operations": [
                {
                    "type": "conditional",
                    "configuration": {
                        "style": "line",
                        "token": "#"
                    }
                }
            ]
        }
    }
}
