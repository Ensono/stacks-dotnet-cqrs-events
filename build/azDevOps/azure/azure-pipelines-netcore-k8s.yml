#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and component will produce a name of `$company-$project-$stage-$component`    #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$component`                                                                                   #
#############################################################################################################################
name: "$(Build.SourceBranchName)-init"

pr:
  - none

trigger:
  - none

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: refs/tags/v2.0.6
      # EXCHANGE THIS FOR YOUR OWN ENDPOINT CONNECTION TO GITHUB
      # REPOSITORY IS PUBLIC
      endpoint: amidostacks

  containers:
    - container: sonar_scanner
      image: amidostacks/ci-sonarscanner:0.0.3
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.14
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.8

variables:
  - template: azuredevops-vars.yml

  - name: component
    value: api

  - name: role
    value: backend

  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos
  - name: self_repo_src
    value: src/api
  - name: self_repo_dir
    value: "$(Agent.BuildDirectory)/s/$(self_repo)"
  - name: self_repo_functions_listener_asb_src
    value: src/functions/func-asb-listener
  - name: self_repo_functions_listener_aeh_src
    value: src/functions/func-aeh-listener
  - name: self_repo_functions_worker_src
    value: src/functions/func-cosmosdb-worker
  - name: self_repo_functions_dir
    value: "$(Agent.BuildDirectory)/s/$(self_functions_src)"
  - name: self_repo_bg_worker_src
    value: src/worker
  - name: self_repo_tf_src
    value: deploy/azure/app/kube
  - name: self_repo_tf_dir
    value: "$(self_repo_dir)/$(self_repo_tf_src)"
  - name: self_repo_tf_servicebus_src
    value: deploy/azure/app/servicebus
  - name: self_repo_tf_servicebus_dir
    value: "$(self_repo_dir)/$(self_repo_tf_servicebus_src)"

  - name: self_pipeline_repo
    value: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates"
  - name: self_pipeline_scripts_dir
    value: "$(self_pipeline_repo)/scripts"

  # Versioning
  - name: version_major
    value: 6
  - name: version_minor
    value: 0
  - name: version_revision
    value: $[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]

  # Docker Config
  - name: docker_dockerfile_path
    value: "src/api"
  - name: docker_image_name
    value: $(self_generic_name)
  - name: docker_worker_function_image_name
    value: stacks-api-events-worker-function
  - name: docker_listener_asb_function_image_name
    value: stacks-api-events-listener-asb-function
  - name: docker_listener_aeh_function_image_name
    value: stacks-api-events-listener-aeh-function
  - name: docker_bg_worker_image_name
    value: stacks-api-events-bg-worker
  - name: docker_image_tag
    value: "$(version_major).$(version_minor).$(version_revision)-$(Build.SourceBranchName)"

  - name: k8s_docker_registry_nonprod
    value: $(docker_container_registry_name_nonprod).azurecr.io
  - name: k8s_docker_registry_prod
    value: $(docker_container_registry_name_prod).azurecr.io

  - name: resource_def_name
    value: dotnet-api-cqrs-events

  # Scripts directory used by pipeline steps
  - name: scripts_dir
    value: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts

  # DEFAULT IMAGE RUNNER
  - name: pool_vm_image
    value: ubuntu-20.04
  # Test setup
  - name: code_coverage_cobertura_directory
    value: coverage
  # Yamllint
  - name: yamllint_config_file
    value: "${{ variables.self_repo_dir }}/yamllint.conf"
  - name: yamllint_scan_directory
    value: "."

stages:
  - stage: Build
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv
      - group: amido-stacks-webapp
      - name: azure_tenant_id
        value: "$(azure-tenant-id)"
      - name: azure_subscription_id
        value: "$(azure-subscription-id)"
      - name: azure_client_id
        value: "$(azure-client-id)"
      - name: azure_client_secret
        value: "$(azure-client-secret)"
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
    jobs:
      - job: AppBuild
        pool:
          vmImage: $(pool_vm_image)
        steps:
          - checkout: self

          - checkout: templates

          # Updates the build number in Azure DevOps (requires refresh in the UI to see)
          - bash: |
              echo '##vso[build.updatebuildnumber]${{ variables.docker_image_tag }}'
            displayName: 'Update: Build Number'

          # Validates all YAML files in the repo to check they adhere to standards
          - template: azDevOps/azure/templates/v3/steps/build/test-validate-yaml.yml@templates
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              container: "k8s_deploy"
              yamllint_config_file: "${{ variables.yamllint_config_file }}"
              yamllint_scan_directory: "${{ variables.yamllint_scan_directory }}"

          # Runs a terraform fomatting check and a validation check
          - template: azDevOps/azure/templates/v3/steps/build/test-validate-terraform.yml@templates
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              terraform_container: "terraform_custom"
              terraform_directory: "${{ variables.self_repo_tf_dir }}"

          # Build .NET packages
          # - API
          - template: templates/steps/build/build-netcore.yml
            parameters:
              dotnet_core_version: "6.0.x"
              # Docker Config
              docker_build: true
              # TODO: normalize this
              docker_build_additional_args: "."
              docker_workdir: $(self_repo_dir)/$(self_repo_src)
              docker_imagename: $(docker_image_name)
              docker_imagetag: $(docker_image_tag)
              docker_containerregistryname: $(docker_container_registry_name_nonprod)
              # Vulnerability Scanning
              vulnerability_scan: false
              vulnerability_workdir: "$(Build.ArtifactStagingDirectory)"
              # Sonar settings
              static_code_analysis: true
              sonar_container: sonar_scanner
              sonar_run_properties: "/d:sonar.cs.opencover.reportsPaths=\"**/*.opencover.xml\" /d:sonar.exclusions=\"**/*Tests\" /d:sonar.coverage.exclusions=\"**/*Tests\""
              sonar_env: {
                SONAR_HOST_URL: "https://sonarcloud.io",
                SONAR_TOKEN: $SONAR_TOKEN,
                SONAR_PROJECT_KEY: $SONAR_PROJECT_KEY,
                SONAR_ORGANIZATION: $SONAR_ORGANIZATION,
                SONAR_PROJECT_NAME: $SONAR_PROJECT_NAME,
                BUILD_VERSION: $(docker_image_tag),
                SONAR_SCANNER_OPTS: "",
              }
              # Should be hardcoded in your sonar-project.properties file
              unit_test: true
              unit_test_project: "*UnitTests"
              component_test: true
              component_test_project: "*ComponentTests"
              # Enable once you have set up a dev or dedicated test db
              integration_test: false
              integration_test_project: "*IntegrationTests"
              integration_test_env: {
                COSMOSDB_KEY: $(COSMOSDB_KEY_DEV),
                CosmosDB__DatabaseName: $(COSMOSDB_NAME_DEV),
                CosmosDB__DatabaseAccountUri: $(COSMOSDB_ACCOUNT_URI_DEV)
              }
              contract_test: false
              contract_test_project: "*ContractTests"
              contract_test_env: {
                BUILD_NUMBER: $(docker_image_tag),
                PACT_BEARER_TOKEN: $(PACT_BEARER_TOKEN),
                BROKER_URL: $(PACT_BROKER)
              }
              test_arguments: "-v q /p:CollectCoverage=true /p:CoverletOutputFormat=opencover"
              functional_test: true
              functional_test_artefact: tests
              repo_name: $(self_repo)
              project_root_dir: $(Pipeline.Workspace)/s/$(self_repo)/$(self_repo_src)

          # - Background worker
          - template: templates/steps/build/build-netcore.yml
            parameters:
              dotnet_core_version: "6.0.x"
              # Docker Config
              docker_build: true
              # TODO: normalize this
              docker_build_additional_args: "."
              docker_workdir: $(self_repo_dir)/$(self_repo_bg_worker_src)
              docker_imagename: $(docker_bg_worker_image_name)
              docker_imagetag: $(docker_image_tag)
              docker_containerregistryname: $(docker_container_registry_name_nonprod)
              # Vulnerability Scanning
              vulnerability_scan: false
              vulnerability_workdir: "$(Build.ArtifactStagingDirectory)"
              # Sonar settings
              static_code_analysis: true
              sonar_container: sonar_scanner
              sonar_run_properties: "/d:sonar.cs.opencover.reportsPaths=\"**/*.opencover.xml\" /d:sonar.exclusions=\"**/*Tests\" /d:sonar.coverage.exclusions=\"**/*Tests\""
              sonar_env: {
                SONAR_HOST_URL: "https://sonarcloud.io",
                SONAR_TOKEN: $SONAR_TOKEN,
                SONAR_PROJECT_KEY: $SONAR_PROJECT_KEY,
                SONAR_ORGANIZATION: $SONAR_ORGANIZATION,
                SONAR_PROJECT_NAME: $SONAR_PROJECT_NAME,
                BUILD_VERSION: $(docker_image_tag),
                SONAR_SCANNER_OPTS: "",
              }
              # Should be hardcoded in your sonar-project.properties file
              unit_test: true
              unit_test_project: "*UnitTests"
              component_test: true
              component_test_project: "*ComponentTests"
              # Enable once you have set up a dev or dedicated test db
              integration_test: false
              integration_test_project: "*IntegrationTests"
              integration_test_env: {
                COSMOSDB_KEY: $(COSMOSDB_KEY_DEV),
                CosmosDB__DatabaseName: $(COSMOSDB_NAME_DEV),
                CosmosDB__DatabaseAccountUri: $(COSMOSDB_ACCOUNT_URI_DEV)
              }
              contract_test: false
              contract_test_project: "*ContractTests"
              contract_test_env: {
                BUILD_NUMBER: $(docker_image_tag),
                PACT_BEARER_TOKEN: $(PACT_BEARER_TOKEN),
                BROKER_URL: $(PACT_BROKER)
              }
              test_arguments: "-v q /p:CollectCoverage=true /p:CoverletOutputFormat=opencover"
              project_root_dir: $(Pipeline.Workspace)/s/$(self_repo)/$(self_repo_src)

          # Build listener function image for Azure Service Bus
          - ${{ if contains(variables.app_bus_type, 'servicebus') }}:
              - template: templates/steps/build/build-function.yml
                parameters:
                  dotnet_core_version: "6.0.x"
                  # Docker Config
                  docker_build: true
                  docker_build_additional_args: "--build-arg function=xxAMIDOxx.xxSTACKSxx.Listener ."
                  docker_workdir: $(self_repo_dir)/$(self_repo_functions_listener_asb_src)
                  docker_imagename: $(docker_listener_asb_function_image_name)
                  docker_imagetag: $(docker_image_tag)
                  docker_containerregistryname: $(docker_container_registry_name_nonprod)

          # Build listener function image for Azure Event Hub
          - ${{ if contains(variables.app_bus_type, 'eventhub') }}:
              - template: templates/steps/build/build-function.yml
                parameters:
                  dotnet_core_version: "6.0.x"
                  # Docker Config
                  docker_build: true
                  docker_build_additional_args: "--build-arg function=xxAMIDOxx.xxSTACKSxx.Listener ."
                  docker_workdir: $(self_repo_dir)/$(self_repo_functions_listener_aeh_src)
                  docker_imagename: $(docker_listener_aeh_function_image_name)
                  docker_imagetag: $(docker_image_tag)
                  docker_containerregistryname: $(docker_container_registry_name_nonprod)

          # Build worker function image
          - template: templates/steps/build/build-function.yml
            parameters:
              dotnet_core_version: "6.0.x"
              # Docker Config
              docker_build: true
              docker_build_additional_args: "--build-arg function=xxAMIDOxx.xxSTACKSxx.Worker ."
              docker_workdir: $(self_repo_dir)/$(self_repo_functions_worker_src)
              docker_imagename: $(docker_worker_function_image_name)
              docker_imagetag: $(docker_image_tag)
              docker_containerregistryname: $(docker_container_registry_name_nonprod)

          # Copy the files into the correct place for packaging
          - task: Bash@3
            displayName: Prepare for Packaging
            inputs:
              targetType: "inline"
              workingDirectory: $(Agent.BuildDirectory)/s
              script: |
                cp $REPO_NAME/template.csproj .
                mkdir ./templates
                pushd templates
                cp -r ${ROOT_SRC_DIR}/$REPO_NAME .
                cp -r ${ROOT_SRC_DIR}/$REPO_NAME/src/api .
                cp -r ${ROOT_SRC_DIR}/$REPO_NAME/src/functions/func-asb-listener .
                cp -r ${ROOT_SRC_DIR}/$REPO_NAME/src/functions/func-aeh-listener .
                cp -r ${ROOT_SRC_DIR}/$REPO_NAME/src/functions/func-cosmosdb-worker .
                cp -r ${ROOT_SRC_DIR}/$REPO_NAME/src/worker .
                popd

            env:
              ROOT_SRC_DIR: $(Agent.BuildDirectory)/s
              REPO_NAME: $(self_repo)

          # Call template to build the package from the templates dir
          - template: azDevOps/azure/templates/v2/steps/build-pack-test-dotnet.yml@templates
            parameters:
              package_path: $(Agent.BuildDirectory)/s
              dotnet_core_version: "6.0.x"
              version_variable_name: version_number

          # Upload the packages as artefacts
          - task: PublishPipelineArtifact@1
            displayName: Publish Templates
            inputs:
              path: $(Agent.BuildDirectory)/a
              artifact: packages

  - stage: Dev
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv
      - group: amido-stacks-webapp
      - name: Environment.ShortName
        value: dev
    jobs:
      - deployment: AppInfraDev
        container: terraform_custom
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-dev
        variables:
          - name: ARM_SUBSCRIPTION_ID
            value: $(azure-subscription-id)
          - name: ARM_CLIENT_ID
            value: $(azure-client-id)
          - name: ARM_CLIENT_SECRET
            value: "$(azure-client-secret)"
          - name: ARM_TENANT_ID
            value: $(azure-tenant-id)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                # Create TF serverside infra
                - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
                  parameters:
                    # Terraform Basic Config
                    terraform_working_dir: '${{ variables.self_repo_tf_dir }}'
                    # changing this would require changing the downstream consumers of these outputs
                    #
                    terraform_output_artefact: 'tfoutputs'
                    # Terraform State Config
                    terraform_backend_client_id: $(ARM_CLIENT_ID)
                    terraform_backend_client_secret: $(ARM_CLIENT_SECRET)
                    terraform_backend_tenant_id: $(ARM_TENANT_ID)
                    terraform_backend_subscription_id: $(ARM_SUBSCRIPTION_ID)
                    terraform_state_rg: $(tf_state_rg)
                    terraform_state_storage: $(tf_state_storage)
                    terraform_state_container: $(tf_state_container)
                    terraform_state_key: $(tf_state_key)
                    # Azure Config
                    azure_client_id: $(ARM_CLIENT_ID)
                    azure_client_secret: $(ARM_CLIENT_SECRET)
                    azure_tenant_id: $(ARM_TENANT_ID)
                    azure_subscription_id: $(ARM_SUBSCRIPTION_ID)
                    terraform_state_workspace: $(Environment.ShortName)
                    # Global Config
                    company: $(company)
                    project: $(project)
                    environment: ''
                    tags: ''
                    # Terraform Resource Specific Config
                    terraform_extra_properties: {
                      TF_VAR_name_component: $(component),
                      TF_VAR_resource_group_location: $(region),
                      TF_VAR_create_cdn_endpoint: false,
                      TF_VAR_cosmosdb_sql_container: "Menu",
                      TF_VAR_cosmosdb_sql_container_partition_key: "/id",
                      TF_VAR_cosmosdb_kind: "GlobalDocumentDB",
                      TF_VAR_cosmosdb_offer_type: "Standard",
                      TF_VAR_create_dns_record: true,
                      TF_VAR_app_insights_name: $(tf_app_insights_name_nonprod),
                      TF_VAR_app_gateway_frontend_ip_name: $(tf_app_gateway_frontend_ip_name_nonprod),
                      TF_VAR_core_resource_group: $(tf_core_resource_group_nonprod),
                      TF_VAR_name_company: $(company),
                      TF_VAR_name_project: $(project),
                      TF_VAR_name_domain: $(domain),
                      TF_VAR_create_cosmosdb: true,
                      TF_VAR_create_cache: false,
                      TF_VAR_stage: $(Environment.ShortName),
                      TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}",
                      TF_VAR_dns_zone_name: $(base_domain_nonprod),
                      TF_VAR_dns_zone_resource_group: "$(dns_zone_resource_group)",
                      TF_VAR_internal_dns_zone_name: $(base_domain_internal_nonprod),
                      TF_VAR_app_bus_type: $(app_bus_type),
                    }
                    terraform_output_commands: |
                      raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                      readarray -t outputs <<<"$raw_tf"
                      for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: DeployDev
        dependsOn: AppInfraDev
        container: k8s_deploy
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-dev
        variables:
          - name: ARM_SUBSCRIPTION_ID
            value: $(azure-subscription-id)
          - name: ARM_CLIENT_ID
            value: $(azure-client-id)
          - name: ARM_CLIENT_SECRET
            value: "$(azure-client-secret)"
          - name: ARM_TENANT_ID
            value: $(azure-tenant-id)
          - name: cosmosdb_database_name
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.cosmosdb_database_name'] ]
          - name: cosmosdb_endpoint
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.cosmosdb_endpoint'] ]
          - name: cosmosdb_primary_master_key
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.cosmosdb_primary_master_key'] ]
          - name: app_insights_instrumentation_key
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.app_insights_instrumentation_key'] ]
          - name: namespace
            value: "$(Environment.ShortName)-${{ variables.domain }}"
          - name: servicebus_topic_name
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.servicebus_topic_name'] ]
          - name: servicebus_connectionstring
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.servicebus_connectionstring'] ]
          - name: function_publisher_name
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.function_publisher_name'] ]
          - name: function_listener_name
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.function_listener_name'] ]
          - name: eventhub_function_listener_name
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.eventhub_function_listener_name'] ]
          - name: app_resource_group
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.resource_group'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    shared_env_vars: {
                      namespace: $(namespace),
                      role: $(role),
                      company: $(company),
                      project: $(project),
                      domain: $(domain),
                      component: $(component),
                      app_name: yumido-netcore-api,
                      app_worker_name: yumido-netcore-bgworker,
                      resource_def_name: $(resource_def_name),
                      resource_def_worker_name: $(resource_def_name)-bg-worker,
                      version: $(docker_image_tag),
                      environment: $(Environment.ShortName)
                    }
                    # uncomment for debug and if you want to see the templated out file in the STDOUT of pipeline
                    enable_debug: "yes"
                    template_input: [
                      {
                        base: $(self_repo_dir)/deploy/k8s/app/base_api-deploy.yml,
                        displayName: AppDeployment,
                        env_vars: {
                          dns_pointer: "$(Environment.ShortName)-${{ variables.domain }}.$(base_domain_nonprod)",
                          tls_domain: $(base_domain_nonprod),
                          k8s_app_path: /api/menu,
                          log_level: "Debug",
                          k8s_image: '$(k8s_docker_registry_nonprod)/$(docker_image_name):$(docker_image_tag)',
                          k8s_worker_image: '$(k8s_docker_registry_nonprod)/$(docker_bg_worker_image_name):$(docker_image_tag)',
                          aadpodidentitybinding: stacks-webapp-identity,
                          app_insights_key: $(app_insights_instrumentation_key),
                          cosmosdb_key: $(cosmosdb_primary_master_key),
                          cosmosdb_endpoint: $(cosmosdb_endpoint),
                          cosmosdb_name: $(cosmosdb_database_name),
                          jwtbearerauthentication_audience: "<TODO>",
                          jwtbearerauthentication_authority: "<TODO>",
                          jwtbearerauthentication_enabled: false,
                          jwtbearerauthentication_openapiauthorizationurl: "<TODO>",
                          jwtbearerauthentication_openapiclientid: "<TODO>",
                          jwtbearerauthentication_openapitokenurl: "<TODO>",
                          servicebus_topic_name: $(servicebus_topic_name),
                          servicebus_subscription_name: $(servicebus_subscription_name),
                          servicebus_connectionstring: $(servicebus_connectionstring)
                        },
                        # -no-unset is present by default
                        args: "-no-empty",
                      }
                    ]

                # Upload the deployment manifest as an artefact
                - task: PublishPipelineArtifact@1
                  displayName: Publish K8s Manifest
                  inputs:
                    path: $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    artifact: manifests_dev

                - template: azDevOps/azure/templates/v2/steps/deploy-k8s-app-kubectl.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    test_artefact: "tests"
                    test_baseurl: "https://$(Environment.ShortName)-${{ variables.domain }}.$(base_domain_nonprod)/api/menu/"
                    functional_test: true
                    dotnet_core_version: "6.0.x"
                    performance_test: false
                    smoke_test: false
                    # Kubernetes Config
                    kubernetes_clusterrg: $(kubernetes_clusterrg_nonprod)
                    kubernetes_clustername: $(kubernetes_clustername_nonprod)
                    # Mutation Information
                    kubectl_filepath:
                      - $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    kubectl_check_deployment: true
                    resource_def_name: $(resource_def_name)
                    namespace: $(namespace)
                    deployment_status_timeout: 120s
                    # Azure Config
                    azure_client_id: $(ARM_CLIENT_ID)
                    azure_client_secret: $(ARM_CLIENT_SECRET)
                    azure_tenant_id: $(ARM_TENANT_ID)
                    azure_subscription_id: $(ARM_SUBSCRIPTION_ID)

                # Update the functions with the credentials to access the container registry
                - task: AzureCLI@2
                  displayName: Set ACR perms on function
                  inputs:
                    azureSubscription: $(azure_service_connection)
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Get the registry credentials
                      $registryCredentials = (
                        az acr credential show `
                          --name $(docker_container_registry_name_nonprod) `
                        | ConvertFrom-Json
                      )

                      $registryUsername = $registryCredentials.username
                      $registryPassword = $registryCredentials.passwords[0].value

                      # Set the permissions on each function
                      $functions = @("$(function_publisher_name)", "$(function_listener_name)", "$(eventhub_function_listener_name)")
                      foreach ($function in $functions) {

                        if (![string]::IsNullOrEmpty($function)) {
                          az functionapp config container set `
                            --resource-group "$(app_resource_group)" `
                            --name "$function" `
                            --docker-registry-server-url "https://$(k8s_docker_registry_nonprod)" `
                            --docker-registry-server-user "$registryUsername" `
                            --docker-registry-server-password "$registryPassword"
                        }
                      }

                # Deploy the function containers to the function apps
                # - Listener for Azure Service Bus
                - task: AzureFunctionAppContainer@1
                  condition: contains('${{ variables.app_bus_type }}', 'servicebus')
                  displayName: Deploy Listener ASB function
                  inputs:
                    azureSubscription: $(azure_service_connection)
                    resourceGroupName: $(app_resource_group)
                    appName: $(function_listener_name)
                    imageName: $(k8s_docker_registry_nonprod)/$(docker_listener_asb_function_image_name):$(docker_image_tag)

                # - Listener for Azure Event Hub
                - task: AzureFunctionAppContainer@1
                  condition: contains('${{ variables.app_bus_type }}', 'eventhub')
                  displayName: Deploy Listener AEH function
                  inputs:
                    azureSubscription: $(azure_service_connection)
                    resourceGroupName: $(app_resource_group)
                    appName: $(eventhub_function_listener_name)
                    imageName: $(k8s_docker_registry_nonprod)/$(docker_listener_aeh_function_image_name):$(docker_image_tag)

                # - Worker
                - task: AzureFunctionAppContainer@1
                  displayName: Deploy Worker function
                  inputs:
                    azureSubscription: $(azure_service_connection)
                    resourceGroupName: $(app_resource_group)
                    appName: $(function_publisher_name)
                    imageName: $(k8s_docker_registry_nonprod)/$(docker_worker_function_image_name):$(docker_image_tag)

  - stage: Prod
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-prod
      - group: stacks-credentials-prod-kv
      - group: amido-stacks-webapp
      - name: Environment.ShortName
        value: prod
    jobs:
      - deployment: AppInfraProd
        container: terraform_custom
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-prod
        variables:
          - name: ARM_SUBSCRIPTION_ID
            value: $(prod-azure-subscription-id)
          - name: ARM_CLIENT_ID
            value: $(prod-azure-client-id)
          - name: ARM_CLIENT_SECRET
            value: "$(prod-azure-client-secret)"
          - name: ARM_TENANT_ID
            value: $(prod-azure-tenant-id)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                # Create TF infra
                - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
                  parameters:
                    # Terraform Basic Config
                    terraform_working_dir: '${{ variables.self_repo_tf_dir }}'
                    # changing this would require changing the downstream consumers of these outputs
                    #
                    terraform_output_artefact: 'tfoutputs'
                    # Terraform State Config
                    terraform_backend_client_id: $(ARM_CLIENT_ID)
                    terraform_backend_client_secret: $(ARM_CLIENT_SECRET)
                    terraform_backend_tenant_id: $(ARM_TENANT_ID)
                    terraform_backend_subscription_id: $(ARM_SUBSCRIPTION_ID)
                    terraform_state_rg: $(tf_state_rg)
                    terraform_state_storage: $(tf_state_storage)
                    terraform_state_container: $(tf_state_container)
                    terraform_state_key: $(tf_state_key)
                    # Azure Config
                    azure_client_id: $(ARM_CLIENT_ID)
                    azure_client_secret: $(ARM_CLIENT_SECRET)
                    azure_tenant_id: $(ARM_TENANT_ID)
                    azure_subscription_id: $(ARM_SUBSCRIPTION_ID)
                    terraform_state_workspace: $(Environment.ShortName)
                    # Global Config
                    company: $(company)
                    project: $(project)
                    component: $(component)
                    environment: ''
                    tags: ''
                    # Terraform Resource Specific Config
                    terraform_extra_properties: {
                      TF_VAR_name_component: $(component),
                      TF_VAR_resource_group_location: $(region),
                      TF_VAR_create_cdn_endpoint: false,
                      TF_VAR_cosmosdb_sql_container: "Menu",
                      TF_VAR_cosmosdb_sql_container_partition_key: "/id",
                      TF_VAR_cosmosdb_kind: "GlobalDocumentDB",
                      TF_VAR_cosmosdb_offer_type: "Standard",
                      TF_VAR_create_dns_record: true,
                      TF_VAR_app_insights_name: $(tf_app_insights_name_prod),
                      TF_VAR_app_gateway_frontend_ip_name: $(tf_app_gateway_frontend_ip_name_prod),
                      TF_VAR_core_resource_group: $(tf_core_resource_group_prod),
                      TF_VAR_name_company: $(company),
                      TF_VAR_name_project: $(project),
                      TF_VAR_name_domain: $(domain),
                      TF_VAR_create_cosmosdb: true,
                      TF_VAR_create_cache: false,
                      TF_VAR_stage: $(Environment.ShortName),
                      TF_VAR_dns_record: "$(Environment.ShortName)-${{ variables.domain }}",
                      TF_VAR_dns_zone_name: $(base_domain_prod),
                      TF_VAR_dns_zone_resource_group: "$(dns_zone_resource_group)",
                      TF_VAR_internal_dns_zone_name: $(base_domain_internal_prod),
                    }
                    terraform_output_commands: |
                      raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                      readarray -t outputs <<<"$raw_tf"
                      for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: PromotionProd
        dependsOn: AppInfraProd
        container: k8s_deploy
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-prod
        variables:
          - group: amido-stacks-infra-credentials-nonprod
          - group: amido-stacks-infra-credentials-prod
          - group: stacks-credentials-nonprod-kv
          - group: stacks-credentials-prod-kv
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                - task: Bash@3
                  inputs:
                    filePath: "$(self_pipeline_scripts_dir)/util-azure-promote-image.bash"
                    arguments: >
                      -a "$(docker_image_name):$(docker_image_tag)"
                      -b "$(k8s_docker_registry_nonprod)"
                      -c "$(azure-subscription-id)"
                      -d "$(azure-client-id)"
                      -e "$(azure-client-secret)"
                      -f "$(azure-tenant-id)"
                      -g "$(k8s_docker_registry_prod)"
                      -h "$(prod-azure-subscription-id)"
                      -i "$(prod-azure-client-id)"
                      -j "$(prod-azure-client-secret)"
                      -k "$(prod-azure-tenant-id)"
                      -Z "false"
                  displayName: Promote API Docker Image to Production ACR

                - task: Bash@3
                  inputs:
                    filePath: "$(self_pipeline_scripts_dir)/util-azure-promote-image.bash"
                    arguments: >
                      -a "$(docker_worker_function_image_name):$(docker_image_tag)"
                      -b "$(k8s_docker_registry_nonprod)"
                      -c "$(azure-subscription-id)"
                      -d "$(azure-client-id)"
                      -e "$(azure-client-secret)"
                      -f "$(azure-tenant-id)"
                      -g "$(k8s_docker_registry_prod)"
                      -h "$(prod-azure-subscription-id)"
                      -i "$(prod-azure-client-id)"
                      -j "$(prod-azure-client-secret)"
                      -k "$(prod-azure-tenant-id)"
                      -Z "false"
                  displayName: Promote Worker function Docker Image to Production ACR

                - task: Bash@3
                  condition: contains('${{ variables.app_bus_type }}', 'servicebus')
                  inputs:
                    filePath: "$(self_pipeline_scripts_dir)/util-azure-promote-image.bash"
                    arguments: >
                      -a "$(docker_listener_asb_function_image_name):$(docker_image_tag)"
                      -b "$(k8s_docker_registry_nonprod)"
                      -c "$(azure-subscription-id)"
                      -d "$(azure-client-id)"
                      -e "$(azure-client-secret)"
                      -f "$(azure-tenant-id)"
                      -g "$(k8s_docker_registry_prod)"
                      -h "$(prod-azure-subscription-id)"
                      -i "$(prod-azure-client-id)"
                      -j "$(prod-azure-client-secret)"
                      -k "$(prod-azure-tenant-id)"
                      -Z "false"
                  displayName: Promote Listener ASB function Docker Image to Production ACR

                - task: Bash@3
                  condition: contains('${{ variables.app_bus_type }}', 'eventhub')
                  inputs:
                    filePath: "$(self_pipeline_scripts_dir)/util-azure-promote-image.bash"
                    arguments: >
                      -a "$(docker_listener_aeh_function_image_name):$(docker_image_tag)"
                      -b "$(k8s_docker_registry_nonprod)"
                      -c "$(azure-subscription-id)"
                      -d "$(azure-client-id)"
                      -e "$(azure-client-secret)"
                      -f "$(azure-tenant-id)"
                      -g "$(k8s_docker_registry_prod)"
                      -h "$(prod-azure-subscription-id)"
                      -i "$(prod-azure-client-id)"
                      -j "$(prod-azure-client-secret)"
                      -k "$(prod-azure-tenant-id)"
                      -Z "false"
                  displayName: Promote Listener AEH function Docker Image to Production ACR

                - task: Bash@3
                  inputs:
                    filePath: "$(self_pipeline_scripts_dir)/util-azure-promote-image.bash"
                    arguments: >
                      -a "$(docker_bg_worker_image_name):$(docker_image_tag)"
                      -b "$(k8s_docker_registry_nonprod)"
                      -c "$(azure-subscription-id)"
                      -d "$(azure-client-id)"
                      -e "$(azure-client-secret)"
                      -f "$(azure-tenant-id)"
                      -g "$(k8s_docker_registry_prod)"
                      -h "$(prod-azure-subscription-id)"
                      -i "$(prod-azure-client-id)"
                      -j "$(prod-azure-client-secret)"
                      -k "$(prod-azure-tenant-id)"
                      -Z "false"
                  displayName: Promote BG worker Docker Image to Production ACR

      - deployment: DeployProd
        dependsOn:
          - AppInfraProd
          - PromotionProd
        container: k8s_deploy
        pool:
          vmImage: $(pool_vm_image)
        environment: prod
        variables:
          - name: ARM_SUBSCRIPTION_ID
            value: $(prod-azure-subscription-id)
          - name: ARM_CLIENT_ID
            value: $(prod-azure-client-id)
          - name: ARM_CLIENT_SECRET
            value: "$(prod-azure-client-secret)"
          - name: ARM_TENANT_ID
            value: $(prod-azure-tenant-id)
          - name: cosmosdb_database_name
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.cosmosdb_database_name'] ]
          - name: cosmosdb_endpoint
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.cosmosdb_endpoint'] ]
          - name: cosmosdb_primary_master_key
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.cosmosdb_primary_master_key'] ]
          - name: app_insights_instrumentation_key
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.app_insights_instrumentation_key'] ]
          - name: namespace
            value: "$(Environment.ShortName)-${{ variables.domain }}"
          - name: servicebus_topic_name
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.servicebus_topic_name'] ]
          - name: servicebus_connectionstring
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.servicebus_connectionstring'] ]
          - name: function_publisher_name
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.function_publisher_name'] ]
          - name: function_listener_name
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.function_listener_name'] ]
          - name: eventhub_function_listener_name
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.eventhub_function_listener_name'] ]
          - name: app_resource_group
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.resource_group'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    shared_env_vars: {
                      namespace: $(namespace),
                      role: $(role),
                      company: $(company),
                      project: $(project),
                      domain: $(domain),
                      component: $(component),
                      app_name: yumido-netcore-api,
                      app_worker_name: yumido-netcore-bgworker,
                      resource_def_name: $(resource_def_name),
                      resource_def_worker_name: $(resource_def_name)-bg-worker,
                      version: $(docker_image_tag),
                      environment: $(Environment.ShortName)
                    }
                    # uncomment for debug and if you want to see the templated out file in the STDOUT of pipeline
                    enable_debug: "yes"
                    template_input: [
                      {
                        base: $(self_repo_dir)/deploy/k8s/app/base_api-deploy.yml,
                        displayName: AppDeployment,
                        env_vars: {
                          dns_pointer: "$(Environment.ShortName)-${{ variables.domain }}.$(base_domain_prod)",
                          tls_domain: $(base_domain_prod),
                          k8s_app_path: /api/menu,
                          log_level: "Debug",
                          k8s_image: '$(k8s_docker_registry_prod)/$(docker_image_name):$(docker_image_tag)',
                          k8s_worker_image: '$(k8s_docker_registry_prod)/$(docker_bg_worker_image_name):$(docker_image_tag)',
                          aadpodidentitybinding: stacks-webapp-identity,
                          app_insights_key: $(app_insights_instrumentation_key),
                          cosmosdb_key: $(cosmosdb_primary_master_key),
                          cosmosdb_endpoint: $(cosmosdb_endpoint),
                          cosmosdb_name: $(cosmosdb_database_name),
                          jwtbearerauthentication_audience: "<TODO>",
                          jwtbearerauthentication_authority: "<TODO>",
                          jwtbearerauthentication_enabled: false,
                          jwtbearerauthentication_openapiauthorizationurl: "<TODO>",
                          jwtbearerauthentication_openapiclientid: "<TODO>",
                          jwtbearerauthentication_openapitokenurl: "<TODO>",
                          servicebus_topic_name: $(servicebus_topic_name),
                          servicebus_subscription_name: $(servicebus_subscription_name),
                          servicebus_connectionstring: $(servicebus_connectionstring)
                        },
                        # -no-unset is present by default
                        args: "-no-empty",
                      }
                    ]

                # Upload the deployment manifest as an artefact
                - task: PublishPipelineArtifact@1
                  displayName: Publish K8s Manifest
                  inputs:
                    path: $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    artifact: manifests_prod

                - template: azDevOps/azure/templates/v2/steps/deploy-k8s-app-kubectl.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    test_artefact: "tests"
                    test_baseurl: "https://$(Environment.ShortName)-${{ variables.domain }}.$(base_domain_prod)/api/menu/"
                    functional_test: true
                    dotnet_core_version: "6.0.x"
                    performance_test: false
                    smoke_test: false
                    # Kubernetes Config
                    kubernetes_clusterrg: $(kubernetes_clusterrg_prod)
                    kubernetes_clustername: $(kubernetes_clustername_prod)
                    # Mutation Information
                    kubectl_filepath:
                      - $(self_repo_dir)/deploy/k8s/app/api-deploy.yml
                    kubectl_check_deployment: true
                    resource_def_name: $(resource_def_name)
                    namespace: $(namespace)
                    deployment_status_timeout: 120s
                    # Azure Config
                    azure_client_id: $(ARM_CLIENT_ID)
                    azure_client_secret: $(ARM_CLIENT_SECRET)
                    azure_tenant_id: $(ARM_TENANT_ID)
                    azure_subscription_id: $(ARM_SUBSCRIPTION_ID)

                # Update the functions with the credentials to access the container registry
                - task: AzureCLI@2
                  displayName: Set ACR perms on function
                  inputs:
                    azureSubscription: $(azure_service_connection)
                    scriptType: 'pscore'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Get the registry credentials
                      $registryCredentials = (
                        az acr credential show `
                          --name $(docker_container_registry_name_prod) `
                        | ConvertFrom-Json
                      )

                      $registryUsername = $registryCredentials.username
                      $registryPassword = $registryCredentials.passwords[0].value

                      # Set the permissions on each function
                      $functions = @("$(function_publisher_name)", "$(function_listener_name)", "$(eventhub_function_listener_name")
                      foreach ($function in $functions) {

                        if (![string]::IsNullOrEmpty($function)) {
                          az functionapp config container set `
                            --resource-group "$(app_resource_group)" `
                            --name "$function" `
                            --docker-registry-server-url "https://$(k8s_docker_registry_prod)" `
                            --docker-registry-server-user "$registryUsername" `
                            --docker-registry-server-password "$registryPassword"
                        }
                      }

                # Deploy the function containers to the function apps
                # - Listener Azure Service Bus
                - task: AzureFunctionAppContainer@1
                  condition: contains('${{ variables.app_bus_type }}', 'servicebus')
                  displayName: Deploy Listener ASB function
                  inputs:
                    azureSubscription: $(azure_service_connection)
                    resourceGroupName: $(app_resource_group)
                    appName: $(function_listener_name)
                    imageName: $(k8s_docker_registry_prod)/$(docker_listener_asb_function_image_name):$(docker_image_tag)

                - task: AzureFunctionAppContainer@1
                  condition: contains('${{ variables.app_bus_type }}', 'eventhub')
                  displayName: Deploy Listener AEH function
                  inputs:
                    azureSubscription: $(azure_service_connection)
                    resourceGroupName: $(app_resource_group)
                    appName: $(function_listener_name)
                    imageName: $(k8s_docker_registry_prod)/$(docker_listener_aeh_function_image_name):$(docker_image_tag)

                # - Worker
                - task: AzureFunctionAppContainer@1
                  displayName: Deploy Worker function
                  inputs:
                    azureSubscription: $(azure_service_connection)
                    resourceGroupName: $(app_resource_group)
                    appName: $(function_publisher_name)
                    imageName: $(k8s_docker_registry_prod)/$(docker_worker_function_image_name):$(docker_image_tag)

  - stage: Release
    dependsOn:
      - Build
      - Prod
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['create_release'], 'true'))
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
    jobs:
      - job: CreateGitHubRelease
        pool:
          vmImage: $(pool_vm_image)
        steps:
          # Check out the repo so that it can be tagged
          - checkout: self
            persistCredentials: true

          # Download the artefacts from the build to create the release from
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'packages'
              path: $(Build.ArtifactStagingDirectory)/packages

          # Create a tag in the code for this release
          - task: Bash@3
            displayName: Tag Code
            inputs:
              targetType: "inline"
              script: |
                git config user.name "BuildService"
                git config user.email "builder@${COMPANY}.com"

                git tag -a v${VERSION_NUMBER} -m "Release created by Azure DevOps"
                git push origin v${VERSION_NUMBER}
            env:
              COMPANY: $(company)

          # Create a GitHub release with these packages
          - task: GitHubRelease@0
            displayName: Create GitHub Release
            inputs:
              gitHubConnection: $(github_release_service_connection)
              repositoryName: $(github_org)/$(self_repo)
              tag: $(Build.BuildNumber)
              assets: |
                $(Build.ArtifactStagingDirectory)/packages/*.nupkg

          # Push the package to Nuget
          - template: azDevOps/azure/templates/v2/steps/deploy-push-package-symbols-public.yml@templates
            parameters:
              nuget_sevice_connection: $(nuget_service_connection)
